package backend

import intermediate.IntermediateCode
import intermediate.IntermediateCodeGenerator
import intermediate.SymbolTable
import intermediate.SymbolTableStack
import message.MessageHandler
import message.MessageProducer

abstract class Backend : MessageProducer {
    companion object {
        val messageHandler = MessageHandler()
    }

    protected var symbolTable: SymbolTable? = null
    open protected var iCode: IntermediateCode? = null

    /**
     * Process the intermediate code and the symbol table generated by the parser.
     * To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code
     * @param symbolTable the symbolTable
     */
    abstract fun process(iCodeGenerator: IntermediateCode, symbolTable: SymbolTable)
}